"use strict";
/*
 * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var ask_sdk_1 = require("ask-sdk");
var dynamoDbPersistenceAdapter;
/* tslint:disable */
exports.ResponseHandlers = {
    ':tell': function (speechOutput) {
        if (this.isOverridden()) {
            return;
        }
        this.response.speak(speechOutput);
        this.emit(':responseReady');
    },
    ':ask': function (speechOutput, repromptSpeech) {
        if (this.isOverridden()) {
            return;
        }
        this.response.speak(speechOutput).listen(repromptSpeech);
        this.emit(':responseReady');
    },
    ':askWithCard': function (speechOutput, repromptSpeech, cardTitle, cardContent, imageObj) {
        if (this.isOverridden()) {
            return;
        }
        this.response.speak(speechOutput)
            .listen(repromptSpeech)
            .cardRenderer(cardTitle, cardContent, imageObj);
        this.emit(':responseReady');
    },
    ':tellWithCard': function (speechOutput, cardTitle, cardContent, imageObj) {
        if (this.isOverridden()) {
            return;
        }
        this.response.speak(speechOutput)
            .cardRenderer(cardTitle, cardContent, imageObj);
        this.emit(':responseReady');
    },
    ':tellWithLinkAccountCard': function (speechOutput) {
        if (this.isOverridden()) {
            return;
        }
        this.response.speak(speechOutput)
            .linkAccountCard();
        this.emit(':responseReady');
    },
    ':askWithLinkAccountCard': function (speechOutput, repromptSpeech) {
        if (this.isOverridden()) {
            return;
        }
        this.response.speak(speechOutput)
            .listen(repromptSpeech)
            .linkAccountCard();
        this.emit(':responseReady');
    },
    ':askWithPermissionCard': function (speechOutput, repromptSpeech, permissions) {
        if (this.isOverridden()) {
            return;
        }
        this.response.speak(speechOutput)
            .listen(repromptSpeech)
            .askForPermissionsConsentCard(permissions);
        this.emit(':responseReady');
    },
    ':tellWithPermissionCard': function (speechOutput, permissions) {
        if (this.isOverridden()) {
            return;
        }
        this.response.speak(speechOutput)
            .askForPermissionsConsentCard(permissions);
        this.emit(':responseReady');
    },
    ':delegate': function (updatedIntent) {
        if (this.isOverridden()) {
            return;
        }
        this.response.delegate(updatedIntent);
        this.emit(':responseReady');
    },
    ':elicitSlot': function (slotName, speechOutput, repromptSpeech, updatedIntent) {
        if (this.isOverridden()) {
            return;
        }
        this.response.speak(speechOutput)
            .listen(repromptSpeech)
            .elicitSlot(slotName, updatedIntent);
        this.emit(':responseReady');
    },
    ':elicitSlotWithCard': function (slotName, speechOutput, repromptSpeech, cardTitle, cardContent, updatedIntent, imageObj) {
        if (this.isOverridden()) {
            return;
        }
        this.response.speak(speechOutput)
            .listen(repromptSpeech)
            .cardRenderer(cardTitle, cardContent, imageObj)
            .elicitSlot(slotName, updatedIntent);
        this.emit(':responseReady');
    },
    ':confirmSlot': function (slotName, speechOutput, repromptSpeech, updatedIntent) {
        if (this.isOverridden()) {
            return;
        }
        this.response.speak(speechOutput)
            .listen(repromptSpeech)
            .confirmSlot(slotName, updatedIntent);
        this.emit(':responseReady');
    },
    ':confirmSlotWithCard': function (slotName, speechOutput, repromptSpeech, cardTitle, cardContent, updatedIntent, imageObj) {
        if (this.isOverridden()) {
            return;
        }
        this.response.speak(speechOutput)
            .listen(repromptSpeech)
            .cardRenderer(cardTitle, cardContent, imageObj)
            .confirmSlot(slotName, updatedIntent);
        this.emit(':responseReady');
    },
    ':confirmIntent': function (speechOutput, repromptSpeech, updatedIntent) {
        if (this.isOverridden()) {
            return;
        }
        this.response.speak(speechOutput)
            .listen(repromptSpeech)
            .confirmIntent(updatedIntent);
        this.emit(':responseReady');
    },
    ':confirmIntentWithCard': function (speechOutput, repromptSpeech, cardTitle, cardContent, updatedIntent, imageObj) {
        if (this.isOverridden()) {
            return;
        }
        this.response.speak(speechOutput)
            .listen(repromptSpeech)
            .cardRenderer(cardTitle, cardContent, imageObj)
            .confirmIntent(updatedIntent);
        this.emit(':responseReady');
    },
    ':responseReady': function () {
        if (this.isOverridden()) {
            return;
        }
        if (this.handler.state) {
            this.handler.response.sessionAttributes.STATE = this.handler.state;
        }
        if (this.handler.dynamoDBTableName) {
            return this.emit(':saveState');
        }
        this.handler.promiseResolve(this.handler.response.response);
    },
    ':saveState': function (forceSave) {
        var _this = this;
        if (this.isOverridden()) {
            return;
        }
        if (forceSave && this.handler.state) {
            this.attributes.STATE = this.handler.state;
        }
        var response = this.handler.response.response;
        if (response.shouldEndSession || forceSave || this.handler.saveBeforeResponse) {
            if (!dynamoDbPersistenceAdapter) {
                dynamoDbPersistenceAdapter = new ask_sdk_1.DynamoDbPersistenceAdapter({
                    createTable: true,
                    dynamoDBClient: this.handler.dynamoDBClient,
                    partitionKeyName: 'userId',
                    attributesName: 'mapAttr',
                    tableName: this.handler.dynamoDBTableName,
                });
            }
            dynamoDbPersistenceAdapter.saveAttributes(this.event, this.attributes).then(function () {
                _this.handler.promiseResolve(response);
            }).catch(function (error) {
                if (error) {
                    return _this.emit(':saveStateError', error);
                }
            });
        }
        else {
            this.handler.promiseResolve(response);
        }
    },
    ':saveStateError': function (error) {
        if (this.isOverridden()) {
            return;
        }
        console.log("Error saving state: " + error + "\n" + error.stack);
        if (typeof this.callback === 'undefined') {
            this.context.fail(error);
        }
        else {
            this.callback(error);
        }
    },
};
//# sourceMappingURL=responseHandlers.js.map