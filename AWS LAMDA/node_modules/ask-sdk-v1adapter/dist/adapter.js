"use strict";
/*
 * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var ask_sdk_1 = require("ask-sdk");
var aws_sdk_1 = require("aws-sdk");
var events_1 = require("events");
var i18n = require("i18next");
var sprintf = require("i18next-sprintf-postprocessor");
var copySessionAttributesInterceptor_1 = require("./copySessionAttributesInterceptor");
var skillEventHandlers_1 = require("./defaultHandlers/skillEventHandlers");
var handler_1 = require("./handler");
var responseBuilderShim_1 = require("./responseBuilderShim");
var responseHandlers_1 = require("./responseHandlers");
var Adapter = /** @class */ (function (_super) {
    __extends(Adapter, _super);
    function Adapter(event, context, callback) {
        var _this = _super.call(this) || this;
        if (!event.session) {
            event.session = {
                new: undefined,
                sessionId: undefined,
                user: undefined,
                application: undefined,
                attributes: {},
            };
        }
        else if (!event.session.attributes) {
            event.session.attributes = {};
        }
        _this.setMaxListeners(Infinity);
        _this._event = event;
        _this._context = context;
        _this._callback = callback;
        _this.response = {
            version: '1.0',
            response: {},
        };
        _this.dynamoDBClient = new aws_sdk_1.DynamoDB({
            apiVersion: 'latest',
        });
        _this.saveBeforeResponse = false;
        _this.v2RequestHandlers = [];
        _this.i18n = i18n;
        _this.registerHandlers(skillEventHandlers_1.SkillEventHandlers);
        _this.registerHandlers(responseHandlers_1.ResponseHandlers);
        return _this;
    }
    Adapter.prototype.registerHandlers = function () {
        var _this = this;
        var v1Handlers = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            v1Handlers[_i] = arguments[_i];
        }
        for (var _a = 0, v1Handlers_1 = v1Handlers; _a < v1Handlers_1.length; _a++) {
            var handler = v1Handlers_1[_a];
            if (!IsObject(handler)) {
                throw ask_sdk_1.createAskSdkError(this.constructor.name, "Argument #" + handler.constructor.name + " was not an Object");
            }
            var eventNames = Object.keys(handler);
            for (var _b = 0, eventNames_1 = eventNames; _b < eventNames_1.length; _b++) {
                var eventName = eventNames_1[_b];
                if (typeof (handler[eventName]) !== 'function') {
                    throw ask_sdk_1.createAskSdkError(this.constructor.name, "Event handler for '" + eventName + "' was not a function");
                }
                var targetEventName = eventName;
                if (handler[exports.StateString]) {
                    targetEventName += handler[exports.StateString];
                }
                var handlerContext = {
                    on: this.on.bind(this),
                    emit: this.emit.bind(this),
                    emitWithState: EmitWithState.bind(this),
                    handler: this,
                    i18n: this.i18n,
                    locale: this.locale,
                    t: function () {
                        var argArray = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            argArray[_i] = arguments[_i];
                        }
                        return _this.i18n.t.apply(_this.i18n, argArray);
                    },
                    event: this._event,
                    attributes: this._event.session.attributes,
                    context: this._context,
                    callback: this._callback,
                    name: targetEventName,
                    isOverridden: IsOverridden.bind(this, targetEventName),
                    response: new responseBuilderShim_1.ResponseBuilder(this),
                };
                this.on(targetEventName, handler[eventName].bind(handlerContext));
            }
        }
    };
    Adapter.prototype.registerV2Handlers = function () {
        var requestHandlers = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            requestHandlers[_i] = arguments[_i];
        }
        this.v2RequestHandlers = __spreadArrays(this.v2RequestHandlers, requestHandlers);
    };
    Adapter.prototype.execute = function () {
        var _this = this;
        // tslint:disable-next-line
        this.locale = this._event.request['locale'] ? this._event.request['locale'] : 'en-US';
        if (this.resources) {
            this.i18n.use(sprintf).init({
                lng: this.locale,
                overloadTranslationOptionHandler: sprintf.overloadTranslationOptionHandler,
                resources: this.resources,
                returnObjects: true,
            }, function (err) {
                if (err) {
                    throw ask_sdk_1.createAskSdkError(_this.constructor.name, 'Error initializing i19next: ' + err);
                }
                ValidateRequest.call(_this);
            });
        }
        else {
            ValidateRequest.call(this);
        }
    };
    return Adapter;
}(events_1.EventEmitter));
exports.Adapter = Adapter;
exports.StateString = Symbol('StateString');
function CreateStateHandler(state, requestHandler) {
    if (!requestHandler) {
        requestHandler = {};
    }
    Object.defineProperty(requestHandler, exports.StateString, {
        value: state || '',
        enumerable: false,
    });
    return requestHandler;
}
exports.CreateStateHandler = CreateStateHandler;
var dynamoDbPersistenceAdapter;
/* tslint:disable */
function ValidateRequest() {
    var _this = this;
    var requestAppId = '';
    if (this._event.context) {
        requestAppId = this._event.context.System.application.applicationId;
    }
    else if (this._event.session) {
        requestAppId = this._event.session.application.applicationId;
    }
    if (!this.appId) {
        console.log('Warning: Application ID is not set');
    }
    try {
        if (this.appId && (requestAppId !== this.appId)) {
            console.log("The applicationIds don't match: " + requestAppId + " and " + this.appId);
            var error = ask_sdk_1.createAskSdkError('In validating request', 'Invalid ApplicationId: ' + this.appId);
            if (typeof this.callback === 'undefined') {
                this._context.fail(error);
            }
            else {
                this._callback(error);
            }
        }
        if (this.dynamoDBTableName && (!this._event.session.sessionId || this._event.session.new)) {
            if (!dynamoDbPersistenceAdapter) {
                dynamoDbPersistenceAdapter = new ask_sdk_1.DynamoDbPersistenceAdapter({
                    createTable: true,
                    dynamoDBClient: this.dynamoDBClient,
                    partitionKeyName: 'userId',
                    attributesName: 'mapAttr',
                    tableName: this.dynamoDBTableName,
                });
            }
            dynamoDbPersistenceAdapter.getAttributes(this._event)
                .then(function (data) {
                Object.assign(_this._event.session.attributes, data);
                EmitEvent.call(_this);
            })
                .catch(function (error) {
                var err = ask_sdk_1.createAskSdkError(_this.constructor.name, 'Error fetching user state: ' + error);
                if (typeof _this._callback === 'undefined') {
                    return _this._context.fail(err);
                }
                else {
                    return _this._callback(err);
                }
            });
        }
        else {
            EmitEvent.call(this);
        }
    }
    catch (e) {
        console.log("Unexpected exception '" + e + "':\n" + e.stack);
        if (typeof this._callback === 'undefined') {
            return this._context.fail(e);
        }
        else {
            return this._callback(e);
        }
    }
}
function EmitEvent() {
    var _a;
    var _this = this;
    var packageInfo = require('../package.json');
    this.state = this._event.session.attributes.STATE || '';
    (_a = ask_sdk_1.SkillBuilders.custom()).addRequestHandlers.apply(_a, __spreadArrays([new handler_1.Handler(this)], this.v2RequestHandlers)).addRequestInterceptors(new copySessionAttributesInterceptor_1.CopySessionAttributesInterceptor())
        .withPersistenceAdapter(dynamoDbPersistenceAdapter)
        .withApiClient(new ask_sdk_1.DefaultApiClient())
        .withCustomUserAgent(packageInfo.name + "/" + packageInfo.version)
        .create()
        .invoke(this._event, this._context)
        .then(function (responseEnvelope) {
        if (typeof _this._callback === 'undefined') {
            _this._context.succeed(responseEnvelope);
        }
        else {
            _this._callback(null, responseEnvelope);
        }
    })
        .catch(function (err) {
        if (typeof _this._callback === 'undefined') {
            _this._context.fail(err);
        }
        else {
            _this._callback(err);
        }
    });
}
function EmitWithState() {
    if (arguments.length === 0) {
        throw ask_sdk_1.createAskSdkError(this.constructor.name, 'EmitWithState called without arguments');
    }
    arguments[0] = arguments[0] + this.state;
    if (this.listenerCount(arguments[0]) < 1) {
        arguments[0] = 'Unhandled' + this.state;
    }
    if (this.listenerCount(arguments[0]) < 1) {
        throw ask_sdk_1.createAskSdkError(this.constructor.name, "No 'Unhandled' function defined for event: " + arguments[0]);
    }
    this.emit.apply(this, arguments);
}
function IsOverridden(name) {
    return this.listenerCount(name) > 1;
}
function IsObject(obj) {
    return (!!obj) && (obj.constructor === Object);
}
process.on('uncaughtException', function (err) {
    console.log("Uncaught exception: " + err + "\n" + err.stack);
    throw err;
});
//# sourceMappingURL=adapter.js.map