"use strict";
/*
 * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var serviceError_1 = require("./serviceError");
var v1ApiClient_1 = require("./v1ApiClient");
var ListManagementService = /** @class */ (function () {
    function ListManagementService(apiClient) {
        this.apiClient = apiClient || new v1ApiClient_1.V1ApiClient();
        this.listManagementPath = '/v2/householdlists/';
        this.apiEndpoint = 'https://api.amazonalexa.com';
    }
    ListManagementService.prototype.setApiEndpoint = function (apiEndpoint) {
        this.apiEndpoint = apiEndpoint;
    };
    ListManagementService.prototype.getApiEndpoint = function () {
        return this.apiEndpoint;
    };
    ListManagementService.prototype.getListsMetadata = function (token) {
        return __awaiter(this, void 0, void 0, function () {
            var uri, headers, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        uri = this.apiEndpoint + this.listManagementPath;
                        headers = this.buildHeaders(token);
                        return [4 /*yield*/, this.apiClient.get(uri, headers)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, this.validateApiResponse(response)];
                }
            });
        });
    };
    ListManagementService.prototype.createList = function (listObject, token) {
        return __awaiter(this, void 0, void 0, function () {
            var uri, headers, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        uri = this.apiEndpoint + this.listManagementPath;
                        headers = this.buildHeaders(token, listObject);
                        return [4 /*yield*/, this.apiClient.post(uri, headers, JSON.stringify(listObject))];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, this.validateApiResponse(response)];
                }
            });
        });
    };
    ListManagementService.prototype.getList = function (listId, itemStatus, token) {
        return __awaiter(this, void 0, void 0, function () {
            var uri, headers, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        uri = this.apiEndpoint + this.listManagementPath + listId + '/' + itemStatus;
                        headers = this.buildHeaders(token);
                        return [4 /*yield*/, this.apiClient.get(uri, headers)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, this.validateApiResponse(response)];
                }
            });
        });
    };
    ListManagementService.prototype.updateList = function (listId, listOjbect, token) {
        return __awaiter(this, void 0, void 0, function () {
            var uri, headers, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        uri = this.apiEndpoint + this.listManagementPath + listId;
                        headers = this.buildHeaders(token, listOjbect);
                        return [4 /*yield*/, this.apiClient.put(uri, headers, JSON.stringify(listOjbect))];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, this.validateApiResponse(response)];
                }
            });
        });
    };
    ListManagementService.prototype.deleteList = function (listId, token) {
        return __awaiter(this, void 0, void 0, function () {
            var uri, headers, response, isResponseCodeValid;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        uri = this.apiEndpoint + this.listManagementPath + listId;
                        headers = this.buildHeaders(token);
                        return [4 /*yield*/, this.apiClient.delete(uri, headers)];
                    case 1:
                        response = _a.sent();
                        isResponseCodeValid = response.statusCode >= 200 && response.statusCode < 300;
                        if (isResponseCodeValid) {
                            return [2 /*return*/];
                        }
                        throw new serviceError_1.ServiceError(response.statusCode, JSON.stringify(response.body));
                }
            });
        });
    };
    ListManagementService.prototype.createListItem = function (listId, listItemObject, token) {
        return __awaiter(this, void 0, void 0, function () {
            var uri, headers, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        uri = this.apiEndpoint + this.listManagementPath + listId + '/items';
                        headers = this.buildHeaders(token, listItemObject);
                        return [4 /*yield*/, this.apiClient.post(uri, headers, JSON.stringify(listItemObject))];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, this.validateApiResponse(response)];
                }
            });
        });
    };
    ListManagementService.prototype.getListItem = function (listId, itemId, token) {
        return __awaiter(this, void 0, void 0, function () {
            var uri, headers, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        uri = this.apiEndpoint + this.listManagementPath + listId + '/items/' + itemId;
                        headers = this.buildHeaders(token);
                        return [4 /*yield*/, this.apiClient.get(uri, headers)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, this.validateApiResponse(response)];
                }
            });
        });
    };
    ListManagementService.prototype.updateListItem = function (listId, itemId, listItemObject, token) {
        return __awaiter(this, void 0, void 0, function () {
            var uri, headers, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        uri = this.apiEndpoint + this.listManagementPath + listId + '/items/' + itemId;
                        headers = this.buildHeaders(token, listItemObject);
                        return [4 /*yield*/, this.apiClient.put(uri, headers, JSON.stringify(listItemObject))];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, this.validateApiResponse(response)];
                }
            });
        });
    };
    ListManagementService.prototype.deleteListItem = function (listId, itemId, token) {
        return __awaiter(this, void 0, void 0, function () {
            var uri, headers, response, isResponseCodeValid;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        uri = this.apiEndpoint + this.listManagementPath + listId + '/items/' + itemId;
                        headers = this.buildHeaders(token);
                        return [4 /*yield*/, this.apiClient.delete(uri, headers)];
                    case 1:
                        response = _a.sent();
                        isResponseCodeValid = response.statusCode >= 200 && response.statusCode < 300;
                        if (isResponseCodeValid) {
                            return [2 /*return*/];
                        }
                        throw new serviceError_1.ServiceError(response.statusCode, JSON.stringify(response.body));
                }
            });
        });
    };
    ListManagementService.prototype.buildHeaders = function (token, body) {
        var headers = [];
        headers.push({ key: 'Authorization', value: "Bearer " + token });
        if (body) {
            headers.push({ key: 'Content-type', value: 'application/json' });
            headers.push({ key: 'Content-length', value: Buffer.byteLength(JSON.stringify(body), 'utf8').toString() });
        }
        return headers;
    };
    ListManagementService.prototype.validateApiResponse = function (apiClientResponse) {
        var isResponseCodeValid = apiClientResponse.statusCode >= 200 && apiClientResponse.statusCode < 300;
        var responseBody;
        try {
            responseBody = apiClientResponse.body && JSON.parse(apiClientResponse.body);
        }
        catch (err) {
            responseBody = apiClientResponse.body;
        }
        if (isResponseCodeValid) {
            return responseBody;
        }
        throw new serviceError_1.ServiceError(apiClientResponse.statusCode, JSON.stringify(responseBody));
    };
    return ListManagementService;
}());
exports.ListManagementService = ListManagementService;
//# sourceMappingURL=listManagementService.js.map