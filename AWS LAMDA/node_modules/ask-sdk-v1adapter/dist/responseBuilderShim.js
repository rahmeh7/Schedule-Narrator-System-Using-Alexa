"use strict";
/*
 * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var ask_sdk_1 = require("ask-sdk");
var ResponseBuilder = /** @class */ (function () {
    function ResponseBuilder(adapter) {
        this._responseObject = adapter.response;
        this._responseObject.sessionAttributes = adapter._event.session.attributes;
        this.responseHelper = ask_sdk_1.ResponseFactory.init().withShouldEndSession(true);
    }
    ResponseBuilder.prototype.speak = function (speechOutput) {
        this.responseHelper.speak(speechOutput);
        this._responseObject.response = this.responseHelper.getResponse();
        return this;
    };
    ResponseBuilder.prototype.listen = function (repromptSpeechOutput) {
        this.responseHelper.reprompt(repromptSpeechOutput)
            .withShouldEndSession(false);
        this._responseObject.response = this.responseHelper.getResponse();
        return this;
    };
    ResponseBuilder.prototype.cardRenderer = function (cardTitle, cardContent, cardImage) {
        if (cardImage && cardImage.smallImageUrl && cardImage.largeImageUrl) {
            this.responseHelper.withStandardCard(cardTitle, cardContent, cardImage.smallImageUrl, cardImage.largeImageUrl);
        }
        else if (cardImage && cardImage.smallImageUrl) {
            this.responseHelper.withStandardCard(cardTitle, cardContent, cardImage.smallImageUrl);
        }
        else if (cardImage && cardImage.largeImageUrl) {
            this.responseHelper.withStandardCard(cardTitle, cardContent, cardImage.largeImageUrl);
        }
        else {
            this.responseHelper.withSimpleCard(cardTitle, cardContent);
        }
        this._responseObject.response = this.responseHelper.getResponse();
        return this;
    };
    ResponseBuilder.prototype.linkAccountCard = function () {
        this.responseHelper.withLinkAccountCard();
        this._responseObject.response = this.responseHelper.getResponse();
        return this;
    };
    ResponseBuilder.prototype.askForPermissionsConsentCard = function (permissions) {
        this.responseHelper.withAskForPermissionsConsentCard(permissions);
        this._responseObject.response = this.responseHelper.getResponse();
        return this;
    };
    ResponseBuilder.prototype.delegate = function (intent) {
        this.responseHelper.addDelegateDirective(intent)
            .withShouldEndSession(false);
        this._responseObject.response = this.responseHelper.getResponse();
        return this;
    };
    ResponseBuilder.prototype.elicitSlot = function (slotName, updatedIntent) {
        this.responseHelper.addElicitSlotDirective(slotName, updatedIntent)
            .withShouldEndSession(false);
        this._responseObject.response = this.responseHelper.getResponse();
        return this;
    };
    ResponseBuilder.prototype.confirmSlot = function (slotName, updatedIntent) {
        this.responseHelper.addConfirmSlotDirective(slotName, updatedIntent)
            .withShouldEndSession(false);
        this._responseObject.response = this.responseHelper.getResponse();
        return this;
    };
    ResponseBuilder.prototype.confirmIntent = function (updatedIntent) {
        this.responseHelper.addConfirmIntentDirective(updatedIntent)
            .withShouldEndSession(false);
        this._responseObject.response = this.responseHelper.getResponse();
        return this;
    };
    ResponseBuilder.prototype.audioPlayerPlay = function (behavior, url, audioToken, expectedPreviousToken, offsetInMilliseconds) {
        this.responseHelper.addAudioPlayerPlayDirective(behavior, url, audioToken, offsetInMilliseconds, expectedPreviousToken);
        this._responseObject.response = this.responseHelper.getResponse();
        return this;
    };
    ResponseBuilder.prototype.audioPlayerStop = function () {
        this.responseHelper.addAudioPlayerStopDirective();
        this._responseObject.response = this.responseHelper.getResponse();
        return this;
    };
    ResponseBuilder.prototype.audioPlayerClearQueue = function (clearBehavior) {
        this.responseHelper.addAudioPlayerClearQueueDirective(clearBehavior);
        this._responseObject.response = this.responseHelper.getResponse();
        return this;
    };
    ResponseBuilder.prototype.renderTemplate = function (template) {
        this.responseHelper.addRenderTemplateDirective(template);
        this._responseObject.response = this.responseHelper.getResponse();
        return this;
    };
    ResponseBuilder.prototype.hint = function (hintText) {
        this.responseHelper.addHintDirective(hintText);
        this._responseObject.response = this.responseHelper.getResponse();
        return this;
    };
    ResponseBuilder.prototype.playVideo = function (source, metadata) {
        if (metadata) {
            this.responseHelper.addVideoAppLaunchDirective(source, metadata.title, metadata.subtitle);
        }
        else {
            this.responseHelper.addVideoAppLaunchDirective(source);
        }
        this.responseHelper.withShouldEndSession(undefined);
        this._responseObject.response = this.responseHelper.getResponse();
        return this;
    };
    ResponseBuilder.prototype.shouldEndSession = function (val) {
        this.responseHelper.withShouldEndSession(val);
        this._responseObject.response = this.responseHelper.getResponse();
        return this;
    };
    ResponseBuilder.prototype._addDirective = function (directive) {
        this.responseHelper.addDirective(directive);
        this._responseObject.response = this.responseHelper.getResponse();
        return this;
    };
    return ResponseBuilder;
}());
exports.ResponseBuilder = ResponseBuilder;
//# sourceMappingURL=responseBuilderShim.js.map