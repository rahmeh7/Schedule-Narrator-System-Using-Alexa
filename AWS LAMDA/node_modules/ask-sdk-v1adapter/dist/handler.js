"use strict";
/*
 * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var ask_sdk_1 = require("ask-sdk");
var eventParser_1 = require("./eventParser");
var Handler = /** @class */ (function () {
    function Handler(adapter) {
        this.adapter = adapter;
    }
    Handler.prototype.canHandle = function (handlerInput) {
        if (this.adapter._event.session && this.adapter._event.session.new
            && this.adapter.listenerCount('NewSession' + this.adapter.state) >= 1) {
            this.targetHandlerName = 'NewSession';
            return true;
        }
        this.targetHandlerName = eventParser_1.EventParser(this.adapter._event);
        return this.adapter.listenerCount(this.targetHandlerName + this.adapter.state) >= 1
            || this.adapter.listenerCount('Unhandled' + this.adapter.state) >= 1;
    };
    Handler.prototype.handle = function (handlerInput) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.adapter.promiseResolve = resolve;
            try {
                if (_this.adapter.listenerCount(_this.targetHandlerName + _this.adapter.state) >= 1) {
                    _this.adapter.emit(_this.targetHandlerName + _this.adapter.state);
                }
                else if (_this.adapter.listenerCount('Unhandled' + _this.adapter.state) >= 1) {
                    _this.adapter.emit('Unhandled' + _this.adapter.state);
                }
                else {
                    reject(ask_sdk_1.createAskSdkError(_this.constructor.name, "In state: " + _this.adapter.state + ". No handler function was defined for event " + _this.targetHandlerName + " and no 'Unhandled' function was defined."));
                }
            }
            catch (e) {
                reject(e);
            }
        });
    };
    return Handler;
}());
exports.Handler = Handler;
//# sourceMappingURL=handler.js.map