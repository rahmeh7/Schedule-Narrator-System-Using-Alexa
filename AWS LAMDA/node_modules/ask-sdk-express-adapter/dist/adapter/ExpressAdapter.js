"use strict";
/*
 * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var ask_sdk_core_1 = require("ask-sdk-core");
var body_parser_1 = require("body-parser");
var util_1 = require("../util");
var verifier_1 = require("../verifier");
/**
 * Express adapter class
 */
var ExpressAdapter = /** @class */ (function () {
    /**
     * Constructor
     *
     * @param {Skill} skill ask-sdk-core custom skill instance
     * @param {boolean} verifySignature boolean flag decide if certificate signature verifier is needed
     * @param {boolean} verifyTimeStamp boolean flag decide if timestamp verifier is needed
     * @param {Verifier[]} verifiers Array of user customized Verifier instances
     */
    function ExpressAdapter(skill, verifySignature, verifyTimeStamp, verifiers) {
        if (verifySignature === void 0) { verifySignature = true; }
        if (verifyTimeStamp === void 0) { verifyTimeStamp = true; }
        if (verifiers === void 0) { verifiers = []; }
        this.skill = skill;
        this.verifiers = verifiers;
        if (!this.skill) {
            throw ask_sdk_core_1.createAskSdkError(this.constructor.name, 'The input skill cannot be empty');
        }
        skill.appendAdditionalUserAgent('ask-express-adapter');
        if (verifySignature) {
            verifiers.push(new verifier_1.SkillRequestSignatureVerifier());
        }
        if (verifyTimeStamp) {
            verifiers.push(new verifier_1.TimestampVerifier());
        }
    }
    /**
     * Get pre-defined request handlers
     *
     * This function return an arry of pre-defined request handlers
     * which are supposed to be registered on users' express application, including:
     * 1: text parser 2: async function to get response envelope after verification, then send result back
     * Example usage: app.post('/', new ExpressAdapter(skill).getASKRequestHandler());
     */
    ExpressAdapter.prototype.getRequestHandlers = function () {
        var _this = this;
        var requestHandlers = [];
        requestHandlers.push(function (req, res, next) {
            if (req.body) {
                res.statusCode = 500;
                res.send('Error in processing request. Do not register any parsers before using the adapter');
                return;
            }
            next();
        });
        requestHandlers.push(body_parser_1.text({
            type: '*/*',
        }));
        requestHandlers.push(function (req, res) { return __awaiter(_this, void 0, void 0, function () {
            var responseEnvelope, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, util_1.asyncVerifyRequestAndDispatch(req.headers, req.body, this.skill, this.verifiers)];
                    case 1:
                        responseEnvelope = _a.sent();
                        res.json(responseEnvelope);
                        return [3 /*break*/, 3];
                    case 2:
                        err_1 = _a.sent();
                        res.statusCode = err_1.name === 'AskSdk.Request verification failed Error' ? 400 : 500;
                        res.send(err_1.name + ", " + err_1.message);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        }); });
        return requestHandlers;
    };
    return ExpressAdapter;
}());
exports.ExpressAdapter = ExpressAdapter;
//# sourceMappingURL=ExpressAdapter.js.map