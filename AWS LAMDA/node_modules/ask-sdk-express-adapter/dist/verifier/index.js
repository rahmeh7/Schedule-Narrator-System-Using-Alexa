"use strict";
/*
 * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var ask_sdk_core_1 = require("ask-sdk-core");
var crypto = require("crypto");
var client = require("https");
var node_forge_1 = require("node-forge");
var url = require("url");
/**
 * Provide constant value
 * For more info, check `link <https://developer.amazon.com/docs/custom-skills/host-a-custom-skill-as-a-web-service.html#checking-the-signature-of-the-request>
 */
var VALID_SIGNING_CERT_CHAIN_PROTOCOL = 'https:';
var VALID_SIGNING_CERT_CHAIN_URL_HOST_NAME = 's3.amazonaws.com';
var VALID_SIGNING_CERT_CHAIN_URL_PATH_PREFIX = '/echo.api/';
var SIGNATURE_CERT_CHAIN_URL_HEADER = 'SignatureCertChainUrl';
var SIGNATURE_HEADER = 'Signature';
var SIGNATURE_FORMAT = 'base64';
var CERT_CHAIN_URL_PORT = 443;
var CERT_CHAIN_DOMAIN = 'echo-api.amazon.com';
var CHARACTER_ENCODING = 'utf8';
var DEFAULT_TIMESTAMP_TOLERANCE_IN_MILLIS = 150000;
var MAX_TIMESTAMP_TOLERANCE_IN_MILLIS = 3600000;
/**
 * Implemention of Verifier which provides a utility method to verify the signature of a skill request.
 */
var SkillRequestSignatureVerifier = /** @class */ (function () {
    function SkillRequestSignatureVerifier() {
        this.certCache = new Map();
    }
    /**
     * Verifies the certificate authenticity.
     *
     * This verifier uses the crypto module pki functions to validate the signature chain in the input request.
     * The verification follows the mechanism explained here :
     * https://developer.amazon.com/docs/custom-skills/host-a-custom-skill-as-a-web-service.html#checking-the-signature-of-the-request
     * @param {string} requestEnvelope Request body of the input POST request in string format
     * @param {IncomingHttpHeaders} headers Headers of the input POST request
     */
    SkillRequestSignatureVerifier.prototype.verify = function (requestEnvelope, headers) {
        return __awaiter(this, void 0, void 0, function () {
            var signatureCertChainUrl, signature, _i, _a, key, keyInLowerCase, pemCert, err_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        for (_i = 0, _a = Object.keys(headers); _i < _a.length; _i++) {
                            key = _a[_i];
                            keyInLowerCase = key.toLocaleLowerCase();
                            if (keyInLowerCase === SIGNATURE_CERT_CHAIN_URL_HEADER.toLowerCase()) {
                                signatureCertChainUrl = headers[key];
                            }
                            else if (keyInLowerCase === SIGNATURE_HEADER.toLowerCase()) {
                                signature = headers[key];
                            }
                        }
                        if (!signatureCertChainUrl) {
                            throw ask_sdk_core_1.createAskSdkError(this.constructor.name, 'Missing Certificate for the skill request');
                        }
                        if (!signature) {
                            throw ask_sdk_core_1.createAskSdkError(this.constructor.name, 'Missing Signature for the skill request');
                        }
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this._validateUrlAndRetriveCertChain(signatureCertChainUrl)];
                    case 2:
                        pemCert = _b.sent();
                        this._validateRequestBody(pemCert, signature, requestEnvelope);
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _b.sent();
                        throw ask_sdk_core_1.createAskSdkError(this.constructor.name, err_1.message);
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     *  Validate Url and retrive certificate chain
     *
     *  This method validates if the URL is valid and loads
     *  the certificate chain, before returning it.
     * @private
     * @param {string} signatureCertChainUrl URL for retrieving certificate chain
     * @return {Promise<string>}
     */
    SkillRequestSignatureVerifier.prototype._validateUrlAndRetriveCertChain = function (signatureCertChainUrl) {
        return __awaiter(this, void 0, void 0, function () {
            var pemCert;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this._validateCertificateUrl(signatureCertChainUrl);
                        return [4 /*yield*/, this._loadCertChain(signatureCertChainUrl)];
                    case 1:
                        pemCert = _a.sent();
                        return [2 /*return*/, pemCert];
                }
            });
        });
    };
    /**
     * Validate the URL containing the certificate chain
     *
     * This method validates if the URL provided adheres to the format mentioned here :
     * https://developer.amazon.com/docs/custom-skills/host-a-custom-skill-as-a-web-service.html#cert-verify-signature-certificate-url
     * @private
     * @param {string} signatureCertChainUrl URL for retrieving certificate chain
     */
    SkillRequestSignatureVerifier.prototype._validateCertificateUrl = function (signatureCertChainUrl) {
        var urlObj = url.parse(signatureCertChainUrl);
        // Validate the protocol
        var protocol = urlObj.protocol;
        if (protocol.toLowerCase() !== VALID_SIGNING_CERT_CHAIN_PROTOCOL) {
            throw ask_sdk_core_1.createAskSdkError(this.constructor.name, "SignatureCertChainUrl contains an unsupported protocol " + protocol + "."
                + (" Expecting " + VALID_SIGNING_CERT_CHAIN_PROTOCOL));
        }
        // Validate the hostname
        var hostname = urlObj.hostname;
        if (hostname !== VALID_SIGNING_CERT_CHAIN_URL_HOST_NAME) {
            throw ask_sdk_core_1.createAskSdkError(this.constructor.name, "SignatureCertChainUrl has invalid host name: " + hostname + "."
                + (" Expecting " + VALID_SIGNING_CERT_CHAIN_URL_HOST_NAME));
        }
        // Validate the path prefix
        var path = urlObj.pathname;
        if (!path.startsWith(VALID_SIGNING_CERT_CHAIN_URL_PATH_PREFIX)) {
            throw ask_sdk_core_1.createAskSdkError(this.constructor.name, "SignatureCertChainUrl has invalid path: " + path + "."
                + (" Expecting the path to start with " + VALID_SIGNING_CERT_CHAIN_URL_PATH_PREFIX));
        }
        // Validate the port uses the default of 443 for HTTPS if explicitly defined in the URL
        var port = Number(urlObj.port);
        if (port && port !== CERT_CHAIN_URL_PORT) {
            throw ask_sdk_core_1.createAskSdkError(this.constructor.name, "SignatureCertChainUrl has invalid port: " + port + "."
                + (" Expecting " + CERT_CHAIN_URL_PORT));
        }
    };
    /**
     * Load certificate chain
     *
     * This method loads the certificate chain from the certificate
     * cache. If there is a cache miss, the certificate chain is
     * loaded from the certificate URL. If certificate chain is
     * loaded from URL, validate it before return.
     * @private
     * @param {string} signatureCertChainUrl URL for retrieving certificate chain
     * @return {Promise<string>}
     */
    SkillRequestSignatureVerifier.prototype._loadCertChain = function (signatureCertChainUrl) {
        return __awaiter(this, void 0, void 0, function () {
            var pemCert;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // try to get cert chain in cache
                        if (this.certCache.has(signatureCertChainUrl)) {
                            return [2 /*return*/, this.certCache.get(signatureCertChainUrl)];
                        }
                        return [4 /*yield*/, this._getCertChainByUrl(signatureCertChainUrl)];
                    case 1:
                        pemCert = _a.sent();
                        // validate the cert chain loaded from url, if it is valid, update cache
                        this._validateCertChain(pemCert);
                        this.certCache.set(signatureCertChainUrl, pemCert);
                        return [2 /*return*/, pemCert];
                }
            });
        });
    };
    /**
     * Loads the certificate chain from the URL.
     *
     * This method use the validated cerificate url to retrive certificate chain
     * @private
     * @param {string} signatureCertChainUrl URL for retrieving certificate chain
     * @return {Promise<string>}
     */
    SkillRequestSignatureVerifier.prototype._getCertChainByUrl = function (signatureCertChainUrl) {
        return new Promise(function (resolve, reject) {
            var clientRequest = client.get(signatureCertChainUrl, function (resp) {
                var data = '';
                var statusCode;
                if (!resp || resp.statusCode !== 200) {
                    statusCode = resp ? resp.statusCode : 0;
                    reject(new Error("Unable to load x509 certificate from URL: " + signatureCertChainUrl + ". Response status code: " + statusCode));
                }
                // A chunk of data has been recieved.
                resp.setEncoding(CHARACTER_ENCODING);
                resp.on('data', function (chunk) {
                    data += chunk;
                });
                // The whole response has been received.
                resp.on('end', function () {
                    resolve(data);
                });
            });
            clientRequest.on('error', function (err) {
                reject(new Error(err.message));
            });
            clientRequest.end();
        });
    };
    /**
     * Validate certificate chain
     *
     * This method uses the crypto module pki functions to validate the signature chain
     * It checks if the passed in certificate chain is valid,
     * i.e it is not expired and the Alexa domain is present in the
     * SAN extensions of the certificate chain.
     * @private
     * @param {string} pemCert Certificate chain in pem format
     */
    SkillRequestSignatureVerifier.prototype._validateCertChain = function (pemCert) {
        var cert = node_forge_1.pki.certificateFromPem(pemCert);
        // check the before/after dates on the certificate are still valid for the present time
        var now = new Date().getTime();
        var notAfter = new Date(cert.validity.notAfter).getTime();
        var notBefore = new Date(cert.validity.notBefore).getTime();
        if (!(now <= notAfter && now >= notBefore)) {
            throw ask_sdk_core_1.createAskSdkError(this.constructor.name, 'Signing Certificate expired or not started');
        }
        // verify Echo API's hostname is specified as one of subject alternative names on the signing certificate
        var subjectAltNameExtention = cert.getExtension('subjectAltName');
        var keyName = 'altNames';
        var domainExist = function (domain) { return domain.value === CERT_CHAIN_DOMAIN; };
        if (!subjectAltNameExtention[keyName].some(domainExist)) {
            throw ask_sdk_core_1.createAskSdkError(this.constructor.name, CERT_CHAIN_DOMAIN + " domain missing in Signature Certificate Chain.");
        }
    };
    /**
     * Validate the request body hash with signature
     *
     * This method checks if the hash value of the request body
     * matches with the hash value of the signature
     * @param pemCert Certificate chain in pem format
     * @param signature Encrypted signature of the request
     * @param requestEnvelope Request body of the input POST request in string format
     */
    SkillRequestSignatureVerifier.prototype._validateRequestBody = function (pemCert, signature, requestEnvelope) {
        var verifier = crypto.createVerify('RSA-SHA1');
        verifier.update(requestEnvelope, CHARACTER_ENCODING);
        if (!verifier.verify(pemCert, signature, SIGNATURE_FORMAT)) {
            throw new Error('request body and signature does not match');
        }
    };
    return SkillRequestSignatureVerifier;
}());
exports.SkillRequestSignatureVerifier = SkillRequestSignatureVerifier;
/**
 * Implemention of Verifier which provides a utility method to handle
 * the request timestamp verification of the input request.
 */
var TimestampVerifier = /** @class */ (function () {
    function TimestampVerifier(tolerance) {
        if (tolerance === void 0) { tolerance = DEFAULT_TIMESTAMP_TOLERANCE_IN_MILLIS; }
        if (tolerance > MAX_TIMESTAMP_TOLERANCE_IN_MILLIS) {
            throw ask_sdk_core_1.createAskSdkError(this.constructor.name, "Provided tolerance value " + tolerance + " exceeds the maximum allowed value " + MAX_TIMESTAMP_TOLERANCE_IN_MILLIS);
        }
        if (tolerance < 0) {
            throw ask_sdk_core_1.createAskSdkError(this.constructor.name, "Negative tolerance values not supported");
        }
        this.toleranceInMillis = tolerance;
    }
    /**
     * Verifies the certificate authenticity.
     *
     * The verify method retrieves the request timestamp and check if
     * it falls in the limit set by the tolerance, by checking with
     * the current timestamp. The verification follows the mechanism explained here :
     * https://developer.amazon.com/docs/custom-skills/host-a-custom-skill-as-a-web-service.html#checking-the-signature-of-the-request
     * @param {string} requestEnvelope Request envelope of the input POST request in string format
     * @return {Promise<void>}
     */
    TimestampVerifier.prototype.verify = function (requestEnvelope) {
        return __awaiter(this, void 0, void 0, function () {
            var requestEnvelopeJson, requestTimeStamp, localNow;
            return __generator(this, function (_a) {
                requestEnvelopeJson = JSON.parse(requestEnvelope);
                if (!(requestEnvelopeJson.request && requestEnvelopeJson.request.timestamp)) {
                    throw ask_sdk_core_1.createAskSdkError(this.constructor.name, 'Timestamp is not present in request');
                }
                requestTimeStamp = new Date(requestEnvelopeJson.request.timestamp);
                localNow = new Date();
                if (requestTimeStamp.getTime() + this.toleranceInMillis < localNow.getTime()) {
                    throw ask_sdk_core_1.createAskSdkError(this.constructor.name, 'Timestamp verification failed');
                }
                return [2 /*return*/];
            });
        });
    };
    return TimestampVerifier;
}());
exports.TimestampVerifier = TimestampVerifier;
//# sourceMappingURL=index.js.map